// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `message.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ServerBound)
pub struct ServerBound {
    // message oneof groups
    pub type_: ::std::option::Option<server_bound::Type>,
    // special fields
    // @@protoc_insertion_point(special_field:ServerBound.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ServerBound {
    fn default() -> &'a ServerBound {
        <ServerBound as ::protobuf::Message>::default_instance()
    }
}

impl ServerBound {
    pub fn new() -> ServerBound {
        ::std::default::Default::default()
    }

    // .PlayPause play_pause = 1;

    pub fn play_pause(&self) -> &PlayPause {
        match self.type_ {
            ::std::option::Option::Some(server_bound::Type::PlayPause(ref v)) => v,
            _ => <PlayPause as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_play_pause(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_play_pause(&self) -> bool {
        match self.type_ {
            ::std::option::Option::Some(server_bound::Type::PlayPause(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_play_pause(&mut self, v: PlayPause) {
        self.type_ = ::std::option::Option::Some(server_bound::Type::PlayPause(v))
    }

    // Mutable pointer to the field.
    pub fn mut_play_pause(&mut self) -> &mut PlayPause {
        if let ::std::option::Option::Some(server_bound::Type::PlayPause(_)) = self.type_ {
        } else {
            self.type_ = ::std::option::Option::Some(server_bound::Type::PlayPause(PlayPause::new()));
        }
        match self.type_ {
            ::std::option::Option::Some(server_bound::Type::PlayPause(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_play_pause(&mut self) -> PlayPause {
        if self.has_play_pause() {
            match self.type_.take() {
                ::std::option::Option::Some(server_bound::Type::PlayPause(v)) => v,
                _ => panic!(),
            }
        } else {
            PlayPause::new()
        }
    }

    // .SelectPlaylist select_playlist = 2;

    pub fn select_playlist(&self) -> &SelectPlaylist {
        match self.type_ {
            ::std::option::Option::Some(server_bound::Type::SelectPlaylist(ref v)) => v,
            _ => <SelectPlaylist as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_select_playlist(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_select_playlist(&self) -> bool {
        match self.type_ {
            ::std::option::Option::Some(server_bound::Type::SelectPlaylist(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_select_playlist(&mut self, v: SelectPlaylist) {
        self.type_ = ::std::option::Option::Some(server_bound::Type::SelectPlaylist(v))
    }

    // Mutable pointer to the field.
    pub fn mut_select_playlist(&mut self) -> &mut SelectPlaylist {
        if let ::std::option::Option::Some(server_bound::Type::SelectPlaylist(_)) = self.type_ {
        } else {
            self.type_ = ::std::option::Option::Some(server_bound::Type::SelectPlaylist(SelectPlaylist::new()));
        }
        match self.type_ {
            ::std::option::Option::Some(server_bound::Type::SelectPlaylist(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_select_playlist(&mut self) -> SelectPlaylist {
        if self.has_select_playlist() {
            match self.type_.take() {
                ::std::option::Option::Some(server_bound::Type::SelectPlaylist(v)) => v,
                _ => panic!(),
            }
        } else {
            SelectPlaylist::new()
        }
    }

    // .ShowPotterName show_potter_name = 3;

    pub fn show_potter_name(&self) -> &ShowPotterName {
        match self.type_ {
            ::std::option::Option::Some(server_bound::Type::ShowPotterName(ref v)) => v,
            _ => <ShowPotterName as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_show_potter_name(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_show_potter_name(&self) -> bool {
        match self.type_ {
            ::std::option::Option::Some(server_bound::Type::ShowPotterName(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_show_potter_name(&mut self, v: ShowPotterName) {
        self.type_ = ::std::option::Option::Some(server_bound::Type::ShowPotterName(v))
    }

    // Mutable pointer to the field.
    pub fn mut_show_potter_name(&mut self) -> &mut ShowPotterName {
        if let ::std::option::Option::Some(server_bound::Type::ShowPotterName(_)) = self.type_ {
        } else {
            self.type_ = ::std::option::Option::Some(server_bound::Type::ShowPotterName(ShowPotterName::new()));
        }
        match self.type_ {
            ::std::option::Option::Some(server_bound::Type::ShowPotterName(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_show_potter_name(&mut self) -> ShowPotterName {
        if self.has_show_potter_name() {
            match self.type_.take() {
                ::std::option::Option::Some(server_bound::Type::ShowPotterName(v)) => v,
                _ => panic!(),
            }
        } else {
            ShowPotterName::new()
        }
    }

    // .ReportSong report_song = 4;

    pub fn report_song(&self) -> &ReportSong {
        match self.type_ {
            ::std::option::Option::Some(server_bound::Type::ReportSong(ref v)) => v,
            _ => <ReportSong as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_report_song(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_report_song(&self) -> bool {
        match self.type_ {
            ::std::option::Option::Some(server_bound::Type::ReportSong(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_report_song(&mut self, v: ReportSong) {
        self.type_ = ::std::option::Option::Some(server_bound::Type::ReportSong(v))
    }

    // Mutable pointer to the field.
    pub fn mut_report_song(&mut self) -> &mut ReportSong {
        if let ::std::option::Option::Some(server_bound::Type::ReportSong(_)) = self.type_ {
        } else {
            self.type_ = ::std::option::Option::Some(server_bound::Type::ReportSong(ReportSong::new()));
        }
        match self.type_ {
            ::std::option::Option::Some(server_bound::Type::ReportSong(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_report_song(&mut self) -> ReportSong {
        if self.has_report_song() {
            match self.type_.take() {
                ::std::option::Option::Some(server_bound::Type::ReportSong(v)) => v,
                _ => panic!(),
            }
        } else {
            ReportSong::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, PlayPause>(
            "play_pause",
            ServerBound::has_play_pause,
            ServerBound::play_pause,
            ServerBound::mut_play_pause,
            ServerBound::set_play_pause,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, SelectPlaylist>(
            "select_playlist",
            ServerBound::has_select_playlist,
            ServerBound::select_playlist,
            ServerBound::mut_select_playlist,
            ServerBound::set_select_playlist,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, ShowPotterName>(
            "show_potter_name",
            ServerBound::has_show_potter_name,
            ServerBound::show_potter_name,
            ServerBound::mut_show_potter_name,
            ServerBound::set_show_potter_name,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, ReportSong>(
            "report_song",
            ServerBound::has_report_song,
            ServerBound::report_song,
            ServerBound::mut_report_song,
            ServerBound::set_report_song,
        ));
        oneofs.push(server_bound::Type::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ServerBound>(
            "ServerBound",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ServerBound {
    const NAME: &'static str = "ServerBound";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.type_ = ::std::option::Option::Some(server_bound::Type::PlayPause(is.read_message()?));
                },
                18 => {
                    self.type_ = ::std::option::Option::Some(server_bound::Type::SelectPlaylist(is.read_message()?));
                },
                26 => {
                    self.type_ = ::std::option::Option::Some(server_bound::Type::ShowPotterName(is.read_message()?));
                },
                34 => {
                    self.type_ = ::std::option::Option::Some(server_bound::Type::ReportSong(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.type_ {
            match v {
                &server_bound::Type::PlayPause(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &server_bound::Type::SelectPlaylist(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &server_bound::Type::ShowPotterName(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &server_bound::Type::ReportSong(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.type_ {
            match v {
                &server_bound::Type::PlayPause(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
                &server_bound::Type::SelectPlaylist(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
                &server_bound::Type::ShowPotterName(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                },
                &server_bound::Type::ReportSong(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ServerBound {
        ServerBound::new()
    }

    fn clear(&mut self) {
        self.type_ = ::std::option::Option::None;
        self.type_ = ::std::option::Option::None;
        self.type_ = ::std::option::Option::None;
        self.type_ = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ServerBound {
        static instance: ServerBound = ServerBound {
            type_: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ServerBound {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ServerBound").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ServerBound {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ServerBound {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `ServerBound`
pub mod server_bound {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:ServerBound.type)
    pub enum Type {
        // @@protoc_insertion_point(oneof_field:ServerBound.play_pause)
        PlayPause(super::PlayPause),
        // @@protoc_insertion_point(oneof_field:ServerBound.select_playlist)
        SelectPlaylist(super::SelectPlaylist),
        // @@protoc_insertion_point(oneof_field:ServerBound.show_potter_name)
        ShowPotterName(super::ShowPotterName),
        // @@protoc_insertion_point(oneof_field:ServerBound.report_song)
        ReportSong(super::ReportSong),
    }

    impl ::protobuf::Oneof for Type {
    }

    impl ::protobuf::OneofFull for Type {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::ServerBound as ::protobuf::MessageFull>::descriptor().oneof_by_name("type").unwrap()).clone()
        }
    }

    impl Type {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Type>("type")
        }
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ClientBound)
pub struct ClientBound {
    // message oneof groups
    pub type_: ::std::option::Option<client_bound::Type>,
    // special fields
    // @@protoc_insertion_point(special_field:ClientBound.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ClientBound {
    fn default() -> &'a ClientBound {
        <ClientBound as ::protobuf::Message>::default_instance()
    }
}

impl ClientBound {
    pub fn new() -> ClientBound {
        ::std::default::Default::default()
    }

    // .HeartBeat heart_beat = 1;

    pub fn heart_beat(&self) -> &HeartBeat {
        match self.type_ {
            ::std::option::Option::Some(client_bound::Type::HeartBeat(ref v)) => v,
            _ => <HeartBeat as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_heart_beat(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_heart_beat(&self) -> bool {
        match self.type_ {
            ::std::option::Option::Some(client_bound::Type::HeartBeat(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_heart_beat(&mut self, v: HeartBeat) {
        self.type_ = ::std::option::Option::Some(client_bound::Type::HeartBeat(v))
    }

    // Mutable pointer to the field.
    pub fn mut_heart_beat(&mut self) -> &mut HeartBeat {
        if let ::std::option::Option::Some(client_bound::Type::HeartBeat(_)) = self.type_ {
        } else {
            self.type_ = ::std::option::Option::Some(client_bound::Type::HeartBeat(HeartBeat::new()));
        }
        match self.type_ {
            ::std::option::Option::Some(client_bound::Type::HeartBeat(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_heart_beat(&mut self) -> HeartBeat {
        if self.has_heart_beat() {
            match self.type_.take() {
                ::std::option::Option::Some(client_bound::Type::HeartBeat(v)) => v,
                _ => panic!(),
            }
        } else {
            HeartBeat::new()
        }
    }

    // .PlayPause play_pause = 2;

    pub fn play_pause(&self) -> &PlayPause {
        match self.type_ {
            ::std::option::Option::Some(client_bound::Type::PlayPause(ref v)) => v,
            _ => <PlayPause as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_play_pause(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_play_pause(&self) -> bool {
        match self.type_ {
            ::std::option::Option::Some(client_bound::Type::PlayPause(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_play_pause(&mut self, v: PlayPause) {
        self.type_ = ::std::option::Option::Some(client_bound::Type::PlayPause(v))
    }

    // Mutable pointer to the field.
    pub fn mut_play_pause(&mut self) -> &mut PlayPause {
        if let ::std::option::Option::Some(client_bound::Type::PlayPause(_)) = self.type_ {
        } else {
            self.type_ = ::std::option::Option::Some(client_bound::Type::PlayPause(PlayPause::new()));
        }
        match self.type_ {
            ::std::option::Option::Some(client_bound::Type::PlayPause(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_play_pause(&mut self) -> PlayPause {
        if self.has_play_pause() {
            match self.type_.take() {
                ::std::option::Option::Some(client_bound::Type::PlayPause(v)) => v,
                _ => panic!(),
            }
        } else {
            PlayPause::new()
        }
    }

    // .Listeners listeners = 3;

    pub fn listeners(&self) -> &Listeners {
        match self.type_ {
            ::std::option::Option::Some(client_bound::Type::Listeners(ref v)) => v,
            _ => <Listeners as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_listeners(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_listeners(&self) -> bool {
        match self.type_ {
            ::std::option::Option::Some(client_bound::Type::Listeners(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_listeners(&mut self, v: Listeners) {
        self.type_ = ::std::option::Option::Some(client_bound::Type::Listeners(v))
    }

    // Mutable pointer to the field.
    pub fn mut_listeners(&mut self) -> &mut Listeners {
        if let ::std::option::Option::Some(client_bound::Type::Listeners(_)) = self.type_ {
        } else {
            self.type_ = ::std::option::Option::Some(client_bound::Type::Listeners(Listeners::new()));
        }
        match self.type_ {
            ::std::option::Option::Some(client_bound::Type::Listeners(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_listeners(&mut self) -> Listeners {
        if self.has_listeners() {
            match self.type_.take() {
                ::std::option::Option::Some(client_bound::Type::Listeners(v)) => v,
                _ => panic!(),
            }
        } else {
            Listeners::new()
        }
    }

    // .ClearPlaylists clear_playlists = 4;

    pub fn clear_playlists(&self) -> &ClearPlaylists {
        match self.type_ {
            ::std::option::Option::Some(client_bound::Type::ClearPlaylists(ref v)) => v,
            _ => <ClearPlaylists as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_clear_playlists(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_clear_playlists(&self) -> bool {
        match self.type_ {
            ::std::option::Option::Some(client_bound::Type::ClearPlaylists(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_clear_playlists(&mut self, v: ClearPlaylists) {
        self.type_ = ::std::option::Option::Some(client_bound::Type::ClearPlaylists(v))
    }

    // Mutable pointer to the field.
    pub fn mut_clear_playlists(&mut self) -> &mut ClearPlaylists {
        if let ::std::option::Option::Some(client_bound::Type::ClearPlaylists(_)) = self.type_ {
        } else {
            self.type_ = ::std::option::Option::Some(client_bound::Type::ClearPlaylists(ClearPlaylists::new()));
        }
        match self.type_ {
            ::std::option::Option::Some(client_bound::Type::ClearPlaylists(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_clear_playlists(&mut self) -> ClearPlaylists {
        if self.has_clear_playlists() {
            match self.type_.take() {
                ::std::option::Option::Some(client_bound::Type::ClearPlaylists(v)) => v,
                _ => panic!(),
            }
        } else {
            ClearPlaylists::new()
        }
    }

    // .AddPlaylist add_playlist = 5;

    pub fn add_playlist(&self) -> &AddPlaylist {
        match self.type_ {
            ::std::option::Option::Some(client_bound::Type::AddPlaylist(ref v)) => v,
            _ => <AddPlaylist as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_add_playlist(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_add_playlist(&self) -> bool {
        match self.type_ {
            ::std::option::Option::Some(client_bound::Type::AddPlaylist(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_add_playlist(&mut self, v: AddPlaylist) {
        self.type_ = ::std::option::Option::Some(client_bound::Type::AddPlaylist(v))
    }

    // Mutable pointer to the field.
    pub fn mut_add_playlist(&mut self) -> &mut AddPlaylist {
        if let ::std::option::Option::Some(client_bound::Type::AddPlaylist(_)) = self.type_ {
        } else {
            self.type_ = ::std::option::Option::Some(client_bound::Type::AddPlaylist(AddPlaylist::new()));
        }
        match self.type_ {
            ::std::option::Option::Some(client_bound::Type::AddPlaylist(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_add_playlist(&mut self) -> AddPlaylist {
        if self.has_add_playlist() {
            match self.type_.take() {
                ::std::option::Option::Some(client_bound::Type::AddPlaylist(v)) => v,
                _ => panic!(),
            }
        } else {
            AddPlaylist::new()
        }
    }

    // .SelectPlaylist select_playlist = 6;

    pub fn select_playlist(&self) -> &SelectPlaylist {
        match self.type_ {
            ::std::option::Option::Some(client_bound::Type::SelectPlaylist(ref v)) => v,
            _ => <SelectPlaylist as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_select_playlist(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_select_playlist(&self) -> bool {
        match self.type_ {
            ::std::option::Option::Some(client_bound::Type::SelectPlaylist(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_select_playlist(&mut self, v: SelectPlaylist) {
        self.type_ = ::std::option::Option::Some(client_bound::Type::SelectPlaylist(v))
    }

    // Mutable pointer to the field.
    pub fn mut_select_playlist(&mut self) -> &mut SelectPlaylist {
        if let ::std::option::Option::Some(client_bound::Type::SelectPlaylist(_)) = self.type_ {
        } else {
            self.type_ = ::std::option::Option::Some(client_bound::Type::SelectPlaylist(SelectPlaylist::new()));
        }
        match self.type_ {
            ::std::option::Option::Some(client_bound::Type::SelectPlaylist(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_select_playlist(&mut self) -> SelectPlaylist {
        if self.has_select_playlist() {
            match self.type_.take() {
                ::std::option::Option::Some(client_bound::Type::SelectPlaylist(v)) => v,
                _ => panic!(),
            }
        } else {
            SelectPlaylist::new()
        }
    }

    // .Ready ready = 7;

    pub fn ready(&self) -> &Ready {
        match self.type_ {
            ::std::option::Option::Some(client_bound::Type::Ready(ref v)) => v,
            _ => <Ready as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_ready(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_ready(&self) -> bool {
        match self.type_ {
            ::std::option::Option::Some(client_bound::Type::Ready(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ready(&mut self, v: Ready) {
        self.type_ = ::std::option::Option::Some(client_bound::Type::Ready(v))
    }

    // Mutable pointer to the field.
    pub fn mut_ready(&mut self) -> &mut Ready {
        if let ::std::option::Option::Some(client_bound::Type::Ready(_)) = self.type_ {
        } else {
            self.type_ = ::std::option::Option::Some(client_bound::Type::Ready(Ready::new()));
        }
        match self.type_ {
            ::std::option::Option::Some(client_bound::Type::Ready(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_ready(&mut self) -> Ready {
        if self.has_ready() {
            match self.type_.take() {
                ::std::option::Option::Some(client_bound::Type::Ready(v)) => v,
                _ => panic!(),
            }
        } else {
            Ready::new()
        }
    }

    // .Comment comment = 8;

    pub fn comment(&self) -> &Comment {
        match self.type_ {
            ::std::option::Option::Some(client_bound::Type::Comment(ref v)) => v,
            _ => <Comment as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_comment(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_comment(&self) -> bool {
        match self.type_ {
            ::std::option::Option::Some(client_bound::Type::Comment(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_comment(&mut self, v: Comment) {
        self.type_ = ::std::option::Option::Some(client_bound::Type::Comment(v))
    }

    // Mutable pointer to the field.
    pub fn mut_comment(&mut self) -> &mut Comment {
        if let ::std::option::Option::Some(client_bound::Type::Comment(_)) = self.type_ {
        } else {
            self.type_ = ::std::option::Option::Some(client_bound::Type::Comment(Comment::new()));
        }
        match self.type_ {
            ::std::option::Option::Some(client_bound::Type::Comment(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_comment(&mut self) -> Comment {
        if self.has_comment() {
            match self.type_.take() {
                ::std::option::Option::Some(client_bound::Type::Comment(v)) => v,
                _ => panic!(),
            }
        } else {
            Comment::new()
        }
    }

    // .OpusData data = 9;

    pub fn data(&self) -> &OpusData {
        match self.type_ {
            ::std::option::Option::Some(client_bound::Type::Data(ref v)) => v,
            _ => <OpusData as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_data(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_data(&self) -> bool {
        match self.type_ {
            ::std::option::Option::Some(client_bound::Type::Data(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: OpusData) {
        self.type_ = ::std::option::Option::Some(client_bound::Type::Data(v))
    }

    // Mutable pointer to the field.
    pub fn mut_data(&mut self) -> &mut OpusData {
        if let ::std::option::Option::Some(client_bound::Type::Data(_)) = self.type_ {
        } else {
            self.type_ = ::std::option::Option::Some(client_bound::Type::Data(OpusData::new()));
        }
        match self.type_ {
            ::std::option::Option::Some(client_bound::Type::Data(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_data(&mut self) -> OpusData {
        if self.has_data() {
            match self.type_.take() {
                ::std::option::Option::Some(client_bound::Type::Data(v)) => v,
                _ => panic!(),
            }
        } else {
            OpusData::new()
        }
    }

    // .ShowPotterName show_potter_name = 10;

    pub fn show_potter_name(&self) -> &ShowPotterName {
        match self.type_ {
            ::std::option::Option::Some(client_bound::Type::ShowPotterName(ref v)) => v,
            _ => <ShowPotterName as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_show_potter_name(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_show_potter_name(&self) -> bool {
        match self.type_ {
            ::std::option::Option::Some(client_bound::Type::ShowPotterName(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_show_potter_name(&mut self, v: ShowPotterName) {
        self.type_ = ::std::option::Option::Some(client_bound::Type::ShowPotterName(v))
    }

    // Mutable pointer to the field.
    pub fn mut_show_potter_name(&mut self) -> &mut ShowPotterName {
        if let ::std::option::Option::Some(client_bound::Type::ShowPotterName(_)) = self.type_ {
        } else {
            self.type_ = ::std::option::Option::Some(client_bound::Type::ShowPotterName(ShowPotterName::new()));
        }
        match self.type_ {
            ::std::option::Option::Some(client_bound::Type::ShowPotterName(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_show_potter_name(&mut self) -> ShowPotterName {
        if self.has_show_potter_name() {
            match self.type_.take() {
                ::std::option::Option::Some(client_bound::Type::ShowPotterName(v)) => v,
                _ => panic!(),
            }
        } else {
            ShowPotterName::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, HeartBeat>(
            "heart_beat",
            ClientBound::has_heart_beat,
            ClientBound::heart_beat,
            ClientBound::mut_heart_beat,
            ClientBound::set_heart_beat,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, PlayPause>(
            "play_pause",
            ClientBound::has_play_pause,
            ClientBound::play_pause,
            ClientBound::mut_play_pause,
            ClientBound::set_play_pause,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, Listeners>(
            "listeners",
            ClientBound::has_listeners,
            ClientBound::listeners,
            ClientBound::mut_listeners,
            ClientBound::set_listeners,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, ClearPlaylists>(
            "clear_playlists",
            ClientBound::has_clear_playlists,
            ClientBound::clear_playlists,
            ClientBound::mut_clear_playlists,
            ClientBound::set_clear_playlists,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, AddPlaylist>(
            "add_playlist",
            ClientBound::has_add_playlist,
            ClientBound::add_playlist,
            ClientBound::mut_add_playlist,
            ClientBound::set_add_playlist,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, SelectPlaylist>(
            "select_playlist",
            ClientBound::has_select_playlist,
            ClientBound::select_playlist,
            ClientBound::mut_select_playlist,
            ClientBound::set_select_playlist,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, Ready>(
            "ready",
            ClientBound::has_ready,
            ClientBound::ready,
            ClientBound::mut_ready,
            ClientBound::set_ready,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, Comment>(
            "comment",
            ClientBound::has_comment,
            ClientBound::comment,
            ClientBound::mut_comment,
            ClientBound::set_comment,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, OpusData>(
            "data",
            ClientBound::has_data,
            ClientBound::data,
            ClientBound::mut_data,
            ClientBound::set_data,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, ShowPotterName>(
            "show_potter_name",
            ClientBound::has_show_potter_name,
            ClientBound::show_potter_name,
            ClientBound::mut_show_potter_name,
            ClientBound::set_show_potter_name,
        ));
        oneofs.push(client_bound::Type::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ClientBound>(
            "ClientBound",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ClientBound {
    const NAME: &'static str = "ClientBound";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.type_ = ::std::option::Option::Some(client_bound::Type::HeartBeat(is.read_message()?));
                },
                18 => {
                    self.type_ = ::std::option::Option::Some(client_bound::Type::PlayPause(is.read_message()?));
                },
                26 => {
                    self.type_ = ::std::option::Option::Some(client_bound::Type::Listeners(is.read_message()?));
                },
                34 => {
                    self.type_ = ::std::option::Option::Some(client_bound::Type::ClearPlaylists(is.read_message()?));
                },
                42 => {
                    self.type_ = ::std::option::Option::Some(client_bound::Type::AddPlaylist(is.read_message()?));
                },
                50 => {
                    self.type_ = ::std::option::Option::Some(client_bound::Type::SelectPlaylist(is.read_message()?));
                },
                58 => {
                    self.type_ = ::std::option::Option::Some(client_bound::Type::Ready(is.read_message()?));
                },
                66 => {
                    self.type_ = ::std::option::Option::Some(client_bound::Type::Comment(is.read_message()?));
                },
                74 => {
                    self.type_ = ::std::option::Option::Some(client_bound::Type::Data(is.read_message()?));
                },
                82 => {
                    self.type_ = ::std::option::Option::Some(client_bound::Type::ShowPotterName(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.type_ {
            match v {
                &client_bound::Type::HeartBeat(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &client_bound::Type::PlayPause(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &client_bound::Type::Listeners(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &client_bound::Type::ClearPlaylists(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &client_bound::Type::AddPlaylist(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &client_bound::Type::SelectPlaylist(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &client_bound::Type::Ready(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &client_bound::Type::Comment(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &client_bound::Type::Data(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &client_bound::Type::ShowPotterName(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.type_ {
            match v {
                &client_bound::Type::HeartBeat(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
                &client_bound::Type::PlayPause(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
                &client_bound::Type::Listeners(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                },
                &client_bound::Type::ClearPlaylists(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                },
                &client_bound::Type::AddPlaylist(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
                },
                &client_bound::Type::SelectPlaylist(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
                },
                &client_bound::Type::Ready(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
                },
                &client_bound::Type::Comment(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
                },
                &client_bound::Type::Data(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
                },
                &client_bound::Type::ShowPotterName(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ClientBound {
        ClientBound::new()
    }

    fn clear(&mut self) {
        self.type_ = ::std::option::Option::None;
        self.type_ = ::std::option::Option::None;
        self.type_ = ::std::option::Option::None;
        self.type_ = ::std::option::Option::None;
        self.type_ = ::std::option::Option::None;
        self.type_ = ::std::option::Option::None;
        self.type_ = ::std::option::Option::None;
        self.type_ = ::std::option::Option::None;
        self.type_ = ::std::option::Option::None;
        self.type_ = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ClientBound {
        static instance: ClientBound = ClientBound {
            type_: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ClientBound {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ClientBound").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ClientBound {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientBound {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `ClientBound`
pub mod client_bound {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:ClientBound.type)
    pub enum Type {
        // @@protoc_insertion_point(oneof_field:ClientBound.heart_beat)
        HeartBeat(super::HeartBeat),
        // @@protoc_insertion_point(oneof_field:ClientBound.play_pause)
        PlayPause(super::PlayPause),
        // @@protoc_insertion_point(oneof_field:ClientBound.listeners)
        Listeners(super::Listeners),
        // @@protoc_insertion_point(oneof_field:ClientBound.clear_playlists)
        ClearPlaylists(super::ClearPlaylists),
        // @@protoc_insertion_point(oneof_field:ClientBound.add_playlist)
        AddPlaylist(super::AddPlaylist),
        // @@protoc_insertion_point(oneof_field:ClientBound.select_playlist)
        SelectPlaylist(super::SelectPlaylist),
        // @@protoc_insertion_point(oneof_field:ClientBound.ready)
        Ready(super::Ready),
        // @@protoc_insertion_point(oneof_field:ClientBound.comment)
        Comment(super::Comment),
        // @@protoc_insertion_point(oneof_field:ClientBound.data)
        Data(super::OpusData),
        // @@protoc_insertion_point(oneof_field:ClientBound.show_potter_name)
        ShowPotterName(super::ShowPotterName),
    }

    impl ::protobuf::Oneof for Type {
    }

    impl ::protobuf::OneofFull for Type {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::ClientBound as ::protobuf::MessageFull>::descriptor().oneof_by_name("type").unwrap()).clone()
        }
    }

    impl Type {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Type>("type")
        }
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:HeartBeat)
pub struct HeartBeat {
    // special fields
    // @@protoc_insertion_point(special_field:HeartBeat.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a HeartBeat {
    fn default() -> &'a HeartBeat {
        <HeartBeat as ::protobuf::Message>::default_instance()
    }
}

impl HeartBeat {
    pub fn new() -> HeartBeat {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<HeartBeat>(
            "HeartBeat",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for HeartBeat {
    const NAME: &'static str = "HeartBeat";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> HeartBeat {
        HeartBeat::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static HeartBeat {
        static instance: HeartBeat = HeartBeat {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for HeartBeat {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("HeartBeat").unwrap()).clone()
    }
}

impl ::std::fmt::Display for HeartBeat {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HeartBeat {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:PlayPause)
pub struct PlayPause {
    // message fields
    // @@protoc_insertion_point(field:PlayPause.is_paused)
    pub is_paused: bool,
    // special fields
    // @@protoc_insertion_point(special_field:PlayPause.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PlayPause {
    fn default() -> &'a PlayPause {
        <PlayPause as ::protobuf::Message>::default_instance()
    }
}

impl PlayPause {
    pub fn new() -> PlayPause {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_paused",
            |m: &PlayPause| { &m.is_paused },
            |m: &mut PlayPause| { &mut m.is_paused },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PlayPause>(
            "PlayPause",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PlayPause {
    const NAME: &'static str = "PlayPause";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.is_paused = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.is_paused != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.is_paused != false {
            os.write_bool(1, self.is_paused)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PlayPause {
        PlayPause::new()
    }

    fn clear(&mut self) {
        self.is_paused = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PlayPause {
        static instance: PlayPause = PlayPause {
            is_paused: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PlayPause {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PlayPause").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PlayPause {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PlayPause {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:Listeners)
pub struct Listeners {
    // message fields
    // @@protoc_insertion_point(field:Listeners.count)
    pub count: u64,
    // special fields
    // @@protoc_insertion_point(special_field:Listeners.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Listeners {
    fn default() -> &'a Listeners {
        <Listeners as ::protobuf::Message>::default_instance()
    }
}

impl Listeners {
    pub fn new() -> Listeners {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "count",
            |m: &Listeners| { &m.count },
            |m: &mut Listeners| { &mut m.count },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Listeners>(
            "Listeners",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Listeners {
    const NAME: &'static str = "Listeners";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.count = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.count != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.count);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.count != 0 {
            os.write_uint64(1, self.count)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Listeners {
        Listeners::new()
    }

    fn clear(&mut self) {
        self.count = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Listeners {
        static instance: Listeners = Listeners {
            count: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Listeners {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Listeners").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Listeners {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Listeners {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:Ready)
pub struct Ready {
    // special fields
    // @@protoc_insertion_point(special_field:Ready.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Ready {
    fn default() -> &'a Ready {
        <Ready as ::protobuf::Message>::default_instance()
    }
}

impl Ready {
    pub fn new() -> Ready {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Ready>(
            "Ready",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Ready {
    const NAME: &'static str = "Ready";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Ready {
        Ready::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Ready {
        static instance: Ready = Ready {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Ready {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Ready").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Ready {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Ready {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ClearPlaylists)
pub struct ClearPlaylists {
    // special fields
    // @@protoc_insertion_point(special_field:ClearPlaylists.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ClearPlaylists {
    fn default() -> &'a ClearPlaylists {
        <ClearPlaylists as ::protobuf::Message>::default_instance()
    }
}

impl ClearPlaylists {
    pub fn new() -> ClearPlaylists {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ClearPlaylists>(
            "ClearPlaylists",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ClearPlaylists {
    const NAME: &'static str = "ClearPlaylists";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ClearPlaylists {
        ClearPlaylists::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ClearPlaylists {
        static instance: ClearPlaylists = ClearPlaylists {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ClearPlaylists {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ClearPlaylists").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ClearPlaylists {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClearPlaylists {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:AddPlaylist)
pub struct AddPlaylist {
    // message fields
    // @@protoc_insertion_point(field:AddPlaylist.name)
    pub name: ::std::string::String,
    // @@protoc_insertion_point(field:AddPlaylist.length)
    pub length: u64,
    // special fields
    // @@protoc_insertion_point(special_field:AddPlaylist.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AddPlaylist {
    fn default() -> &'a AddPlaylist {
        <AddPlaylist as ::protobuf::Message>::default_instance()
    }
}

impl AddPlaylist {
    pub fn new() -> AddPlaylist {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &AddPlaylist| { &m.name },
            |m: &mut AddPlaylist| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "length",
            |m: &AddPlaylist| { &m.length },
            |m: &mut AddPlaylist| { &mut m.length },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AddPlaylist>(
            "AddPlaylist",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AddPlaylist {
    const NAME: &'static str = "AddPlaylist";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = is.read_string()?;
                },
                16 => {
                    self.length = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if self.length != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.length);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if self.length != 0 {
            os.write_uint64(2, self.length)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AddPlaylist {
        AddPlaylist::new()
    }

    fn clear(&mut self) {
        self.name.clear();
        self.length = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AddPlaylist {
        static instance: AddPlaylist = AddPlaylist {
            name: ::std::string::String::new(),
            length: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AddPlaylist {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AddPlaylist").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AddPlaylist {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AddPlaylist {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:SelectPlaylist)
pub struct SelectPlaylist {
    // message fields
    // @@protoc_insertion_point(field:SelectPlaylist.index)
    pub index: u64,
    // @@protoc_insertion_point(field:SelectPlaylist.selected)
    pub selected: bool,
    // special fields
    // @@protoc_insertion_point(special_field:SelectPlaylist.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SelectPlaylist {
    fn default() -> &'a SelectPlaylist {
        <SelectPlaylist as ::protobuf::Message>::default_instance()
    }
}

impl SelectPlaylist {
    pub fn new() -> SelectPlaylist {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "index",
            |m: &SelectPlaylist| { &m.index },
            |m: &mut SelectPlaylist| { &mut m.index },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "selected",
            |m: &SelectPlaylist| { &m.selected },
            |m: &mut SelectPlaylist| { &mut m.selected },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SelectPlaylist>(
            "SelectPlaylist",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SelectPlaylist {
    const NAME: &'static str = "SelectPlaylist";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.index = is.read_uint64()?;
                },
                16 => {
                    self.selected = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.index != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.index);
        }
        if self.selected != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.index != 0 {
            os.write_uint64(1, self.index)?;
        }
        if self.selected != false {
            os.write_bool(2, self.selected)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SelectPlaylist {
        SelectPlaylist::new()
    }

    fn clear(&mut self) {
        self.index = 0;
        self.selected = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SelectPlaylist {
        static instance: SelectPlaylist = SelectPlaylist {
            index: 0,
            selected: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SelectPlaylist {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SelectPlaylist").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SelectPlaylist {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SelectPlaylist {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:Comment)
pub struct Comment {
    // message fields
    // @@protoc_insertion_point(field:Comment.noComment)
    pub noComment: bool,
    // @@protoc_insertion_point(field:Comment.entries)
    pub entries: ::std::vec::Vec<CommentEntry>,
    // special fields
    // @@protoc_insertion_point(special_field:Comment.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Comment {
    fn default() -> &'a Comment {
        <Comment as ::protobuf::Message>::default_instance()
    }
}

impl Comment {
    pub fn new() -> Comment {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "noComment",
            |m: &Comment| { &m.noComment },
            |m: &mut Comment| { &mut m.noComment },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "entries",
            |m: &Comment| { &m.entries },
            |m: &mut Comment| { &mut m.entries },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Comment>(
            "Comment",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Comment {
    const NAME: &'static str = "Comment";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.noComment = is.read_bool()?;
                },
                18 => {
                    self.entries.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.noComment != false {
            my_size += 1 + 1;
        }
        for value in &self.entries {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.noComment != false {
            os.write_bool(1, self.noComment)?;
        }
        for v in &self.entries {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Comment {
        Comment::new()
    }

    fn clear(&mut self) {
        self.noComment = false;
        self.entries.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Comment {
        static instance: Comment = Comment {
            noComment: false,
            entries: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Comment {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Comment").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Comment {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Comment {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:CommentEntry)
pub struct CommentEntry {
    // message fields
    // @@protoc_insertion_point(field:CommentEntry.key)
    pub key: ::std::string::String,
    // @@protoc_insertion_point(field:CommentEntry.value)
    pub value: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:CommentEntry.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CommentEntry {
    fn default() -> &'a CommentEntry {
        <CommentEntry as ::protobuf::Message>::default_instance()
    }
}

impl CommentEntry {
    pub fn new() -> CommentEntry {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "key",
            |m: &CommentEntry| { &m.key },
            |m: &mut CommentEntry| { &mut m.key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value",
            |m: &CommentEntry| { &m.value },
            |m: &mut CommentEntry| { &mut m.value },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CommentEntry>(
            "CommentEntry",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CommentEntry {
    const NAME: &'static str = "CommentEntry";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.key = is.read_string()?;
                },
                18 => {
                    self.value = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.key);
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.value);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.key.is_empty() {
            os.write_string(1, &self.key)?;
        }
        if !self.value.is_empty() {
            os.write_string(2, &self.value)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CommentEntry {
        CommentEntry::new()
    }

    fn clear(&mut self) {
        self.key.clear();
        self.value.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CommentEntry {
        static instance: CommentEntry = CommentEntry {
            key: ::std::string::String::new(),
            value: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CommentEntry {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CommentEntry").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CommentEntry {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CommentEntry {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:OpusData)
pub struct OpusData {
    // message fields
    // @@protoc_insertion_point(field:OpusData.data)
    pub data: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:OpusData.duration)
    pub duration: u32,
    // special fields
    // @@protoc_insertion_point(special_field:OpusData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a OpusData {
    fn default() -> &'a OpusData {
        <OpusData as ::protobuf::Message>::default_instance()
    }
}

impl OpusData {
    pub fn new() -> OpusData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "data",
            |m: &OpusData| { &m.data },
            |m: &mut OpusData| { &mut m.data },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "duration",
            |m: &OpusData| { &m.duration },
            |m: &mut OpusData| { &mut m.duration },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<OpusData>(
            "OpusData",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for OpusData {
    const NAME: &'static str = "OpusData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.data = is.read_bytes()?;
                },
                16 => {
                    self.duration = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.data);
        }
        if self.duration != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.duration);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.data.is_empty() {
            os.write_bytes(1, &self.data)?;
        }
        if self.duration != 0 {
            os.write_uint32(2, self.duration)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> OpusData {
        OpusData::new()
    }

    fn clear(&mut self) {
        self.data.clear();
        self.duration = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static OpusData {
        static instance: OpusData = OpusData {
            data: ::std::vec::Vec::new(),
            duration: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for OpusData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("OpusData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for OpusData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OpusData {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:OpusFrame)
pub struct OpusFrame {
    // message fields
    // @@protoc_insertion_point(field:OpusFrame.data)
    pub data: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:OpusFrame.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a OpusFrame {
    fn default() -> &'a OpusFrame {
        <OpusFrame as ::protobuf::Message>::default_instance()
    }
}

impl OpusFrame {
    pub fn new() -> OpusFrame {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "data",
            |m: &OpusFrame| { &m.data },
            |m: &mut OpusFrame| { &mut m.data },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<OpusFrame>(
            "OpusFrame",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for OpusFrame {
    const NAME: &'static str = "OpusFrame";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.data = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.data.is_empty() {
            os.write_bytes(1, &self.data)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> OpusFrame {
        OpusFrame::new()
    }

    fn clear(&mut self) {
        self.data.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static OpusFrame {
        static instance: OpusFrame = OpusFrame {
            data: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for OpusFrame {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("OpusFrame").unwrap()).clone()
    }
}

impl ::std::fmt::Display for OpusFrame {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OpusFrame {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ShowPotterName)
pub struct ShowPotterName {
    // message fields
    // @@protoc_insertion_point(field:ShowPotterName.show)
    pub show: bool,
    // special fields
    // @@protoc_insertion_point(special_field:ShowPotterName.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ShowPotterName {
    fn default() -> &'a ShowPotterName {
        <ShowPotterName as ::protobuf::Message>::default_instance()
    }
}

impl ShowPotterName {
    pub fn new() -> ShowPotterName {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "show",
            |m: &ShowPotterName| { &m.show },
            |m: &mut ShowPotterName| { &mut m.show },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ShowPotterName>(
            "ShowPotterName",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ShowPotterName {
    const NAME: &'static str = "ShowPotterName";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.show = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.show != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.show != false {
            os.write_bool(1, self.show)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ShowPotterName {
        ShowPotterName::new()
    }

    fn clear(&mut self) {
        self.show = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ShowPotterName {
        static instance: ShowPotterName = ShowPotterName {
            show: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ShowPotterName {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ShowPotterName").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ShowPotterName {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ShowPotterName {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ReportSong)
pub struct ReportSong {
    // message fields
    // @@protoc_insertion_point(field:ReportSong.artist)
    pub artist: ::std::string::String,
    // @@protoc_insertion_point(field:ReportSong.title)
    pub title: ::std::string::String,
    // @@protoc_insertion_point(field:ReportSong.explanation)
    pub explanation: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:ReportSong.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ReportSong {
    fn default() -> &'a ReportSong {
        <ReportSong as ::protobuf::Message>::default_instance()
    }
}

impl ReportSong {
    pub fn new() -> ReportSong {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "artist",
            |m: &ReportSong| { &m.artist },
            |m: &mut ReportSong| { &mut m.artist },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "title",
            |m: &ReportSong| { &m.title },
            |m: &mut ReportSong| { &mut m.title },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "explanation",
            |m: &ReportSong| { &m.explanation },
            |m: &mut ReportSong| { &mut m.explanation },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ReportSong>(
            "ReportSong",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ReportSong {
    const NAME: &'static str = "ReportSong";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.artist = is.read_string()?;
                },
                18 => {
                    self.title = is.read_string()?;
                },
                26 => {
                    self.explanation = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.artist.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.artist);
        }
        if !self.title.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.title);
        }
        if !self.explanation.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.explanation);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.artist.is_empty() {
            os.write_string(1, &self.artist)?;
        }
        if !self.title.is_empty() {
            os.write_string(2, &self.title)?;
        }
        if !self.explanation.is_empty() {
            os.write_string(3, &self.explanation)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ReportSong {
        ReportSong::new()
    }

    fn clear(&mut self) {
        self.artist.clear();
        self.title.clear();
        self.explanation.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ReportSong {
        static instance: ReportSong = ReportSong {
            artist: ::std::string::String::new(),
            title: ::std::string::String::new(),
            explanation: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ReportSong {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ReportSong").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ReportSong {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReportSong {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rmessage.proto\"\xeb\x01\n\x0bServerBound\x12+\n\nplay_pause\x18\x01\
    \x20\x01(\x0b2\n.PlayPauseH\0R\tplayPause\x12:\n\x0fselect_playlist\x18\
    \x02\x20\x01(\x0b2\x0f.SelectPlaylistH\0R\x0eselectPlaylist\x12;\n\x10sh\
    ow_potter_name\x18\x03\x20\x01(\x0b2\x0f.ShowPotterNameH\0R\x0eshowPotte\
    rName\x12.\n\x0breport_song\x18\x04\x20\x01(\x0b2\x0b.ReportSongH\0R\nre\
    portSongB\x06\n\x04type\"\xea\x03\n\x0bClientBound\x12+\n\nheart_beat\
    \x18\x01\x20\x01(\x0b2\n.HeartBeatH\0R\theartBeat\x12+\n\nplay_pause\x18\
    \x02\x20\x01(\x0b2\n.PlayPauseH\0R\tplayPause\x12*\n\tlisteners\x18\x03\
    \x20\x01(\x0b2\n.ListenersH\0R\tlisteners\x12:\n\x0fclear_playlists\x18\
    \x04\x20\x01(\x0b2\x0f.ClearPlaylistsH\0R\x0eclearPlaylists\x121\n\x0cad\
    d_playlist\x18\x05\x20\x01(\x0b2\x0c.AddPlaylistH\0R\x0baddPlaylist\x12:\
    \n\x0fselect_playlist\x18\x06\x20\x01(\x0b2\x0f.SelectPlaylistH\0R\x0ese\
    lectPlaylist\x12\x1e\n\x05ready\x18\x07\x20\x01(\x0b2\x06.ReadyH\0R\x05r\
    eady\x12$\n\x07comment\x18\x08\x20\x01(\x0b2\x08.CommentH\0R\x07comment\
    \x12\x1f\n\x04data\x18\t\x20\x01(\x0b2\t.OpusDataH\0R\x04data\x12;\n\x10\
    show_potter_name\x18\n\x20\x01(\x0b2\x0f.ShowPotterNameH\0R\x0eshowPotte\
    rNameB\x06\n\x04type\"\x0b\n\tHeartBeat\"(\n\tPlayPause\x12\x1b\n\tis_pa\
    used\x18\x01\x20\x01(\x08R\x08isPaused\"!\n\tListeners\x12\x14\n\x05coun\
    t\x18\x01\x20\x01(\x04R\x05count\"\x07\n\x05Ready\"\x10\n\x0eClearPlayli\
    sts\"9\n\x0bAddPlaylist\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\
    \x12\x16\n\x06length\x18\x02\x20\x01(\x04R\x06length\"B\n\x0eSelectPlayl\
    ist\x12\x14\n\x05index\x18\x01\x20\x01(\x04R\x05index\x12\x1a\n\x08selec\
    ted\x18\x02\x20\x01(\x08R\x08selected\"P\n\x07Comment\x12\x1c\n\tnoComme\
    nt\x18\x01\x20\x01(\x08R\tnoComment\x12'\n\x07entries\x18\x02\x20\x03(\
    \x0b2\r.CommentEntryR\x07entries\"6\n\x0cCommentEntry\x12\x10\n\x03key\
    \x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05va\
    lue\":\n\x08OpusData\x12\x12\n\x04data\x18\x01\x20\x01(\x0cR\x04data\x12\
    \x1a\n\x08duration\x18\x02\x20\x01(\rR\x08duration\"\x1f\n\tOpusFrame\
    \x12\x12\n\x04data\x18\x01\x20\x01(\x0cR\x04data\"$\n\x0eShowPotterName\
    \x12\x12\n\x04show\x18\x01\x20\x01(\x08R\x04show\"\\\n\nReportSong\x12\
    \x16\n\x06artist\x18\x01\x20\x01(\tR\x06artist\x12\x14\n\x05title\x18\
    \x02\x20\x01(\tR\x05title\x12\x20\n\x0bexplanation\x18\x03\x20\x01(\tR\
    \x0bexplanationJ\xe8\x10\n\x06\x12\x04\0\0O\x01\n\x08\n\x01\x0c\x12\x03\
    \0\0\x12\n\n\n\x02\x04\0\x12\x04\x02\0\t\x01\n\n\n\x03\x04\0\x01\x12\x03\
    \x02\x08\x13\n\x0c\n\x04\x04\0\x08\0\x12\x04\x03\x02\x08\x03\n\x0c\n\x05\
    \x04\0\x08\0\x01\x12\x03\x03\x08\x0c\n\x0b\n\x04\x04\0\x02\0\x12\x03\x04\
    \x04\x1d\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\x04\x04\r\n\x0c\n\x05\x04\0\
    \x02\0\x01\x12\x03\x04\x0e\x18\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x04\
    \x1b\x1c\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x05\x04'\n\x0c\n\x05\x04\0\
    \x02\x01\x06\x12\x03\x05\x04\x12\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\
    \x05\x13\"\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x05%&\n\x0b\n\x04\x04\0\
    \x02\x02\x12\x03\x06\x04(\n\x0c\n\x05\x04\0\x02\x02\x06\x12\x03\x06\x04\
    \x12\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x06\x13#\n\x0c\n\x05\x04\0\
    \x02\x02\x03\x12\x03\x06&'\n\x0b\n\x04\x04\0\x02\x03\x12\x03\x07\x04\x1f\
    \n\x0c\n\x05\x04\0\x02\x03\x06\x12\x03\x07\x04\x0e\n\x0c\n\x05\x04\0\x02\
    \x03\x01\x12\x03\x07\x0f\x1a\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\x07\
    \x1d\x1e\n\n\n\x02\x04\x01\x12\x04\x0b\0\x18\x01\n\n\n\x03\x04\x01\x01\
    \x12\x03\x0b\x08\x13\n\x0c\n\x04\x04\x01\x08\0\x12\x04\x0c\x02\x17\x03\n\
    \x0c\n\x05\x04\x01\x08\0\x01\x12\x03\x0c\x08\x0c\n\x0b\n\x04\x04\x01\x02\
    \0\x12\x03\r\x04\x1d\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x03\r\x04\r\n\x0c\
    \n\x05\x04\x01\x02\0\x01\x12\x03\r\x0e\x18\n\x0c\n\x05\x04\x01\x02\0\x03\
    \x12\x03\r\x1b\x1c\n\x0b\n\x04\x04\x01\x02\x01\x12\x03\x0e\x04\x1d\n\x0c\
    \n\x05\x04\x01\x02\x01\x06\x12\x03\x0e\x04\r\n\x0c\n\x05\x04\x01\x02\x01\
    \x01\x12\x03\x0e\x0e\x18\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x0e\x1b\
    \x1c\n\x0b\n\x04\x04\x01\x02\x02\x12\x03\x0f\x04\x1c\n\x0c\n\x05\x04\x01\
    \x02\x02\x06\x12\x03\x0f\x04\r\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03\
    \x0f\x0e\x17\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03\x0f\x1a\x1b\n\x0b\n\
    \x04\x04\x01\x02\x03\x12\x03\x10\x04'\n\x0c\n\x05\x04\x01\x02\x03\x06\
    \x12\x03\x10\x04\x12\n\x0c\n\x05\x04\x01\x02\x03\x01\x12\x03\x10\x13\"\n\
    \x0c\n\x05\x04\x01\x02\x03\x03\x12\x03\x10%&\n\x0b\n\x04\x04\x01\x02\x04\
    \x12\x03\x11\x04!\n\x0c\n\x05\x04\x01\x02\x04\x06\x12\x03\x11\x04\x0f\n\
    \x0c\n\x05\x04\x01\x02\x04\x01\x12\x03\x11\x10\x1c\n\x0c\n\x05\x04\x01\
    \x02\x04\x03\x12\x03\x11\x1f\x20\n\x0b\n\x04\x04\x01\x02\x05\x12\x03\x12\
    \x04'\n\x0c\n\x05\x04\x01\x02\x05\x06\x12\x03\x12\x04\x12\n\x0c\n\x05\
    \x04\x01\x02\x05\x01\x12\x03\x12\x13\"\n\x0c\n\x05\x04\x01\x02\x05\x03\
    \x12\x03\x12%&\n\x0b\n\x04\x04\x01\x02\x06\x12\x03\x13\x04\x14\n\x0c\n\
    \x05\x04\x01\x02\x06\x06\x12\x03\x13\x04\t\n\x0c\n\x05\x04\x01\x02\x06\
    \x01\x12\x03\x13\n\x0f\n\x0c\n\x05\x04\x01\x02\x06\x03\x12\x03\x13\x12\
    \x13\n\x0b\n\x04\x04\x01\x02\x07\x12\x03\x14\x04\x18\n\x0c\n\x05\x04\x01\
    \x02\x07\x06\x12\x03\x14\x04\x0b\n\x0c\n\x05\x04\x01\x02\x07\x01\x12\x03\
    \x14\x0c\x13\n\x0c\n\x05\x04\x01\x02\x07\x03\x12\x03\x14\x16\x17\n\x0b\n\
    \x04\x04\x01\x02\x08\x12\x03\x15\x04\x16\n\x0c\n\x05\x04\x01\x02\x08\x06\
    \x12\x03\x15\x04\x0c\n\x0c\n\x05\x04\x01\x02\x08\x01\x12\x03\x15\r\x11\n\
    \x0c\n\x05\x04\x01\x02\x08\x03\x12\x03\x15\x14\x15\n\x0b\n\x04\x04\x01\
    \x02\t\x12\x03\x16\x04)\n\x0c\n\x05\x04\x01\x02\t\x06\x12\x03\x16\x04\
    \x12\n\x0c\n\x05\x04\x01\x02\t\x01\x12\x03\x16\x13#\n\x0c\n\x05\x04\x01\
    \x02\t\x03\x12\x03\x16&(\n\n\n\x02\x04\x02\x12\x04\x1a\0\x1b\x01\n\n\n\
    \x03\x04\x02\x01\x12\x03\x1a\x08\x11\n\n\n\x02\x04\x03\x12\x04\x1d\0\x1f\
    \x01\n\n\n\x03\x04\x03\x01\x12\x03\x1d\x08\x11\n\x0b\n\x04\x04\x03\x02\0\
    \x12\x03\x1e\x02\x15\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03\x1e\x02\x06\n\
    \x0c\n\x05\x04\x03\x02\0\x01\x12\x03\x1e\x07\x10\n\x0c\n\x05\x04\x03\x02\
    \0\x03\x12\x03\x1e\x13\x14\n\n\n\x02\x04\x04\x12\x04!\0#\x01\n\n\n\x03\
    \x04\x04\x01\x12\x03!\x08\x11\n\x0b\n\x04\x04\x04\x02\0\x12\x03\"\x02\
    \x13\n\x0c\n\x05\x04\x04\x02\0\x05\x12\x03\"\x02\x08\n\x0c\n\x05\x04\x04\
    \x02\0\x01\x12\x03\"\t\x0e\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03\"\x11\
    \x12\n\n\n\x02\x04\x05\x12\x04%\0&\x01\n\n\n\x03\x04\x05\x01\x12\x03%\
    \x08\r\n\t\n\x02\x04\x06\x12\x03(\0\x19\n\n\n\x03\x04\x06\x01\x12\x03(\
    \x08\x16\n\n\n\x02\x04\x07\x12\x04*\0-\x01\n\n\n\x03\x04\x07\x01\x12\x03\
    *\x08\x13\n\x0b\n\x04\x04\x07\x02\0\x12\x03+\x02\x12\n\x0c\n\x05\x04\x07\
    \x02\0\x05\x12\x03+\x02\x08\n\x0c\n\x05\x04\x07\x02\0\x01\x12\x03+\t\r\n\
    \x0c\n\x05\x04\x07\x02\0\x03\x12\x03+\x10\x11\n\x0b\n\x04\x04\x07\x02\
    \x01\x12\x03,\x02\x14\n\x0c\n\x05\x04\x07\x02\x01\x05\x12\x03,\x02\x08\n\
    \x0c\n\x05\x04\x07\x02\x01\x01\x12\x03,\t\x0f\n\x0c\n\x05\x04\x07\x02\
    \x01\x03\x12\x03,\x12\x13\n\n\n\x02\x04\x08\x12\x04/\02\x01\n\n\n\x03\
    \x04\x08\x01\x12\x03/\x08\x16\n\x0b\n\x04\x04\x08\x02\0\x12\x030\x02\x13\
    \n\x0c\n\x05\x04\x08\x02\0\x05\x12\x030\x02\x08\n\x0c\n\x05\x04\x08\x02\
    \0\x01\x12\x030\t\x0e\n\x0c\n\x05\x04\x08\x02\0\x03\x12\x030\x11\x12\n\
    \x0b\n\x04\x04\x08\x02\x01\x12\x031\x02\x14\n\x0c\n\x05\x04\x08\x02\x01\
    \x05\x12\x031\x02\x06\n\x0c\n\x05\x04\x08\x02\x01\x01\x12\x031\x07\x0f\n\
    \x0c\n\x05\x04\x08\x02\x01\x03\x12\x031\x12\x13\n\n\n\x02\x04\t\x12\x044\
    \07\x01\n\n\n\x03\x04\t\x01\x12\x034\x08\x0f\n\x0b\n\x04\x04\t\x02\0\x12\
    \x035\x02\x15\n\x0c\n\x05\x04\t\x02\0\x05\x12\x035\x02\x06\n\x0c\n\x05\
    \x04\t\x02\0\x01\x12\x035\x07\x10\n\x0c\n\x05\x04\t\x02\0\x03\x12\x035\
    \x13\x14\n\x0b\n\x04\x04\t\x02\x01\x12\x036\x02$\n\x0c\n\x05\x04\t\x02\
    \x01\x04\x12\x036\x02\n\n\x0c\n\x05\x04\t\x02\x01\x06\x12\x036\x0b\x17\n\
    \x0c\n\x05\x04\t\x02\x01\x01\x12\x036\x18\x1f\n\x0c\n\x05\x04\t\x02\x01\
    \x03\x12\x036\"#\n\n\n\x02\x04\n\x12\x049\0<\x01\n\n\n\x03\x04\n\x01\x12\
    \x039\x08\x14\n\x0b\n\x04\x04\n\x02\0\x12\x03:\x02\x11\n\x0c\n\x05\x04\n\
    \x02\0\x05\x12\x03:\x02\x08\n\x0c\n\x05\x04\n\x02\0\x01\x12\x03:\t\x0c\n\
    \x0c\n\x05\x04\n\x02\0\x03\x12\x03:\x0f\x10\n\x0b\n\x04\x04\n\x02\x01\
    \x12\x03;\x02\x13\n\x0c\n\x05\x04\n\x02\x01\x05\x12\x03;\x02\x08\n\x0c\n\
    \x05\x04\n\x02\x01\x01\x12\x03;\t\x0e\n\x0c\n\x05\x04\n\x02\x01\x03\x12\
    \x03;\x11\x12\n\n\n\x02\x04\x0b\x12\x04>\0A\x01\n\n\n\x03\x04\x0b\x01\
    \x12\x03>\x08\x10\n\x0b\n\x04\x04\x0b\x02\0\x12\x03?\x02\x11\n\x0c\n\x05\
    \x04\x0b\x02\0\x05\x12\x03?\x02\x07\n\x0c\n\x05\x04\x0b\x02\0\x01\x12\
    \x03?\x08\x0c\n\x0c\n\x05\x04\x0b\x02\0\x03\x12\x03?\x0f\x10\n\x0b\n\x04\
    \x04\x0b\x02\x01\x12\x03@\x02\x16\n\x0c\n\x05\x04\x0b\x02\x01\x05\x12\
    \x03@\x02\x08\n\x0c\n\x05\x04\x0b\x02\x01\x01\x12\x03@\t\x11\n\x0c\n\x05\
    \x04\x0b\x02\x01\x03\x12\x03@\x14\x15\n\n\n\x02\x04\x0c\x12\x04C\0E\x01\
    \n\n\n\x03\x04\x0c\x01\x12\x03C\x08\x11\n\x0b\n\x04\x04\x0c\x02\0\x12\
    \x03D\x02\x11\n\x0c\n\x05\x04\x0c\x02\0\x05\x12\x03D\x02\x07\n\x0c\n\x05\
    \x04\x0c\x02\0\x01\x12\x03D\x08\x0c\n\x0c\n\x05\x04\x0c\x02\0\x03\x12\
    \x03D\x0f\x10\n\n\n\x02\x04\r\x12\x04G\0I\x01\n\n\n\x03\x04\r\x01\x12\
    \x03G\x08\x16\n\x0b\n\x04\x04\r\x02\0\x12\x03H\x02\x10\n\x0c\n\x05\x04\r\
    \x02\0\x05\x12\x03H\x02\x06\n\x0c\n\x05\x04\r\x02\0\x01\x12\x03H\x07\x0b\
    \n\x0c\n\x05\x04\r\x02\0\x03\x12\x03H\x0e\x0f\n\n\n\x02\x04\x0e\x12\x04K\
    \0O\x01\n\n\n\x03\x04\x0e\x01\x12\x03K\x08\x12\n\x0b\n\x04\x04\x0e\x02\0\
    \x12\x03L\x02\x14\n\x0c\n\x05\x04\x0e\x02\0\x05\x12\x03L\x02\x08\n\x0c\n\
    \x05\x04\x0e\x02\0\x01\x12\x03L\t\x0f\n\x0c\n\x05\x04\x0e\x02\0\x03\x12\
    \x03L\x12\x13\n\x0b\n\x04\x04\x0e\x02\x01\x12\x03M\x02\x13\n\x0c\n\x05\
    \x04\x0e\x02\x01\x05\x12\x03M\x02\x08\n\x0c\n\x05\x04\x0e\x02\x01\x01\
    \x12\x03M\t\x0e\n\x0c\n\x05\x04\x0e\x02\x01\x03\x12\x03M\x11\x12\n\x0b\n\
    \x04\x04\x0e\x02\x02\x12\x03N\x02\x19\n\x0c\n\x05\x04\x0e\x02\x02\x05\
    \x12\x03N\x02\x08\n\x0c\n\x05\x04\x0e\x02\x02\x01\x12\x03N\t\x14\n\x0c\n\
    \x05\x04\x0e\x02\x02\x03\x12\x03N\x17\x18b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(15);
            messages.push(ServerBound::generated_message_descriptor_data());
            messages.push(ClientBound::generated_message_descriptor_data());
            messages.push(HeartBeat::generated_message_descriptor_data());
            messages.push(PlayPause::generated_message_descriptor_data());
            messages.push(Listeners::generated_message_descriptor_data());
            messages.push(Ready::generated_message_descriptor_data());
            messages.push(ClearPlaylists::generated_message_descriptor_data());
            messages.push(AddPlaylist::generated_message_descriptor_data());
            messages.push(SelectPlaylist::generated_message_descriptor_data());
            messages.push(Comment::generated_message_descriptor_data());
            messages.push(CommentEntry::generated_message_descriptor_data());
            messages.push(OpusData::generated_message_descriptor_data());
            messages.push(OpusFrame::generated_message_descriptor_data());
            messages.push(ShowPotterName::generated_message_descriptor_data());
            messages.push(ReportSong::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
