// This file is generated by rust-protobuf 2.27.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `proto/message.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_27_1;

#[derive(PartialEq,Clone,Default)]
pub struct Message {
    // message oneof groups
    pub field_type: ::std::option::Option<Message_oneof_type>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Message {
    fn default() -> &'a Message {
        <Message as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum Message_oneof_type {
    heart_beat(HeartBeat),
    paused(Paused),
    resumed(Resumed),
    listeners(Listeners),
}

impl Message {
    pub fn new() -> Message {
        ::std::default::Default::default()
    }

    // .HeartBeat heart_beat = 1;


    pub fn get_heart_beat(&self) -> &HeartBeat {
        match self.field_type {
            ::std::option::Option::Some(Message_oneof_type::heart_beat(ref v)) => v,
            _ => <HeartBeat as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_heart_beat(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_heart_beat(&self) -> bool {
        match self.field_type {
            ::std::option::Option::Some(Message_oneof_type::heart_beat(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_heart_beat(&mut self, v: HeartBeat) {
        self.field_type = ::std::option::Option::Some(Message_oneof_type::heart_beat(v))
    }

    // Mutable pointer to the field.
    pub fn mut_heart_beat(&mut self) -> &mut HeartBeat {
        if let ::std::option::Option::Some(Message_oneof_type::heart_beat(_)) = self.field_type {
        } else {
            self.field_type = ::std::option::Option::Some(Message_oneof_type::heart_beat(HeartBeat::new()));
        }
        match self.field_type {
            ::std::option::Option::Some(Message_oneof_type::heart_beat(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_heart_beat(&mut self) -> HeartBeat {
        if self.has_heart_beat() {
            match self.field_type.take() {
                ::std::option::Option::Some(Message_oneof_type::heart_beat(v)) => v,
                _ => panic!(),
            }
        } else {
            HeartBeat::new()
        }
    }

    // .Paused paused = 2;


    pub fn get_paused(&self) -> &Paused {
        match self.field_type {
            ::std::option::Option::Some(Message_oneof_type::paused(ref v)) => v,
            _ => <Paused as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_paused(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_paused(&self) -> bool {
        match self.field_type {
            ::std::option::Option::Some(Message_oneof_type::paused(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_paused(&mut self, v: Paused) {
        self.field_type = ::std::option::Option::Some(Message_oneof_type::paused(v))
    }

    // Mutable pointer to the field.
    pub fn mut_paused(&mut self) -> &mut Paused {
        if let ::std::option::Option::Some(Message_oneof_type::paused(_)) = self.field_type {
        } else {
            self.field_type = ::std::option::Option::Some(Message_oneof_type::paused(Paused::new()));
        }
        match self.field_type {
            ::std::option::Option::Some(Message_oneof_type::paused(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_paused(&mut self) -> Paused {
        if self.has_paused() {
            match self.field_type.take() {
                ::std::option::Option::Some(Message_oneof_type::paused(v)) => v,
                _ => panic!(),
            }
        } else {
            Paused::new()
        }
    }

    // .Resumed resumed = 3;


    pub fn get_resumed(&self) -> &Resumed {
        match self.field_type {
            ::std::option::Option::Some(Message_oneof_type::resumed(ref v)) => v,
            _ => <Resumed as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_resumed(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_resumed(&self) -> bool {
        match self.field_type {
            ::std::option::Option::Some(Message_oneof_type::resumed(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_resumed(&mut self, v: Resumed) {
        self.field_type = ::std::option::Option::Some(Message_oneof_type::resumed(v))
    }

    // Mutable pointer to the field.
    pub fn mut_resumed(&mut self) -> &mut Resumed {
        if let ::std::option::Option::Some(Message_oneof_type::resumed(_)) = self.field_type {
        } else {
            self.field_type = ::std::option::Option::Some(Message_oneof_type::resumed(Resumed::new()));
        }
        match self.field_type {
            ::std::option::Option::Some(Message_oneof_type::resumed(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_resumed(&mut self) -> Resumed {
        if self.has_resumed() {
            match self.field_type.take() {
                ::std::option::Option::Some(Message_oneof_type::resumed(v)) => v,
                _ => panic!(),
            }
        } else {
            Resumed::new()
        }
    }

    // .Listeners listeners = 4;


    pub fn get_listeners(&self) -> &Listeners {
        match self.field_type {
            ::std::option::Option::Some(Message_oneof_type::listeners(ref v)) => v,
            _ => <Listeners as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_listeners(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_listeners(&self) -> bool {
        match self.field_type {
            ::std::option::Option::Some(Message_oneof_type::listeners(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_listeners(&mut self, v: Listeners) {
        self.field_type = ::std::option::Option::Some(Message_oneof_type::listeners(v))
    }

    // Mutable pointer to the field.
    pub fn mut_listeners(&mut self) -> &mut Listeners {
        if let ::std::option::Option::Some(Message_oneof_type::listeners(_)) = self.field_type {
        } else {
            self.field_type = ::std::option::Option::Some(Message_oneof_type::listeners(Listeners::new()));
        }
        match self.field_type {
            ::std::option::Option::Some(Message_oneof_type::listeners(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_listeners(&mut self) -> Listeners {
        if self.has_listeners() {
            match self.field_type.take() {
                ::std::option::Option::Some(Message_oneof_type::listeners(v)) => v,
                _ => panic!(),
            }
        } else {
            Listeners::new()
        }
    }
}

impl ::protobuf::Message for Message {
    fn is_initialized(&self) -> bool {
        if let Some(Message_oneof_type::heart_beat(ref v)) = self.field_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Message_oneof_type::paused(ref v)) = self.field_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Message_oneof_type::resumed(ref v)) = self.field_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Message_oneof_type::listeners(ref v)) = self.field_type {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.field_type = ::std::option::Option::Some(Message_oneof_type::heart_beat(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.field_type = ::std::option::Option::Some(Message_oneof_type::paused(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.field_type = ::std::option::Option::Some(Message_oneof_type::resumed(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.field_type = ::std::option::Option::Some(Message_oneof_type::listeners(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.field_type {
            match v {
                &Message_oneof_type::heart_beat(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Message_oneof_type::paused(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Message_oneof_type::resumed(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Message_oneof_type::listeners(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.field_type {
            match v {
                &Message_oneof_type::heart_beat(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Message_oneof_type::paused(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Message_oneof_type::resumed(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Message_oneof_type::listeners(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Message {
        Message::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, HeartBeat>(
                "heart_beat",
                Message::has_heart_beat,
                Message::get_heart_beat,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Paused>(
                "paused",
                Message::has_paused,
                Message::get_paused,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Resumed>(
                "resumed",
                Message::has_resumed,
                Message::get_resumed,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Listeners>(
                "listeners",
                Message::has_listeners,
                Message::get_listeners,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Message>(
                "Message",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Message {
        static instance: ::protobuf::rt::LazyV2<Message> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Message::new)
    }
}

impl ::protobuf::Clear for Message {
    fn clear(&mut self) {
        self.field_type = ::std::option::Option::None;
        self.field_type = ::std::option::Option::None;
        self.field_type = ::std::option::Option::None;
        self.field_type = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Message {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Message {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HeartBeat {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HeartBeat {
    fn default() -> &'a HeartBeat {
        <HeartBeat as ::protobuf::Message>::default_instance()
    }
}

impl HeartBeat {
    pub fn new() -> HeartBeat {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for HeartBeat {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HeartBeat {
        HeartBeat::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<HeartBeat>(
                "HeartBeat",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static HeartBeat {
        static instance: ::protobuf::rt::LazyV2<HeartBeat> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HeartBeat::new)
    }
}

impl ::protobuf::Clear for HeartBeat {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HeartBeat {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HeartBeat {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Paused {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Paused {
    fn default() -> &'a Paused {
        <Paused as ::protobuf::Message>::default_instance()
    }
}

impl Paused {
    pub fn new() -> Paused {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for Paused {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Paused {
        Paused::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Paused>(
                "Paused",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Paused {
        static instance: ::protobuf::rt::LazyV2<Paused> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Paused::new)
    }
}

impl ::protobuf::Clear for Paused {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Paused {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Paused {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Resumed {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Resumed {
    fn default() -> &'a Resumed {
        <Resumed as ::protobuf::Message>::default_instance()
    }
}

impl Resumed {
    pub fn new() -> Resumed {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for Resumed {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Resumed {
        Resumed::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Resumed>(
                "Resumed",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Resumed {
        static instance: ::protobuf::rt::LazyV2<Resumed> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Resumed::new)
    }
}

impl ::protobuf::Clear for Resumed {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Resumed {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Resumed {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Listeners {
    // message fields
    pub listeners: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Listeners {
    fn default() -> &'a Listeners {
        <Listeners as ::protobuf::Message>::default_instance()
    }
}

impl Listeners {
    pub fn new() -> Listeners {
        ::std::default::Default::default()
    }

    // uint64 listeners = 1;


    pub fn get_listeners(&self) -> u64 {
        self.listeners
    }
    pub fn clear_listeners(&mut self) {
        self.listeners = 0;
    }

    // Param is passed by value, moved
    pub fn set_listeners(&mut self, v: u64) {
        self.listeners = v;
    }
}

impl ::protobuf::Message for Listeners {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.listeners = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.listeners != 0 {
            my_size += ::protobuf::rt::value_size(1, self.listeners, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.listeners != 0 {
            os.write_uint64(1, self.listeners)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Listeners {
        Listeners::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "listeners",
                |m: &Listeners| { &m.listeners },
                |m: &mut Listeners| { &mut m.listeners },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Listeners>(
                "Listeners",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Listeners {
        static instance: ::protobuf::rt::LazyV2<Listeners> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Listeners::new)
    }
}

impl ::protobuf::Clear for Listeners {
    fn clear(&mut self) {
        self.listeners = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Listeners {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Listeners {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x13proto/message.proto\"\xb3\x01\n\x07Message\x12+\n\nheart_beat\x18\
    \x01\x20\x01(\x0b2\n.HeartBeatH\0R\theartBeat\x12!\n\x06paused\x18\x02\
    \x20\x01(\x0b2\x07.PausedH\0R\x06paused\x12$\n\x07resumed\x18\x03\x20\
    \x01(\x0b2\x08.ResumedH\0R\x07resumed\x12*\n\tlisteners\x18\x04\x20\x01(\
    \x0b2\n.ListenersH\0R\tlistenersB\x06\n\x04type\"\x0b\n\tHeartBeat\"\x08\
    \n\x06Paused\"\t\n\x07Resumed\")\n\tListeners\x12\x1c\n\tlisteners\x18\
    \x01\x20\x01(\x04R\tlistenersb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
